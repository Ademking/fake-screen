{"version":3,"sources":["src/win10/index.js"],"names":["render","startProgress","update","crash","next","setCrash","v","console","log","setNext","second","Math","floor","random","getProgress","progress","progressValue","sleep","innerText","blue","document","querySelector","innerHTML","ms","Promise","res","setTimeout","findProgress"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1BC,EAAAA,aAAa;AACb,SAAOC,eAAP;AACD,CAHM;;;AAIP,IAAIC,KAAJ;AACA,IAAIC,IAAJ;;AACA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACnBH,EAAAA,KAAK,GAAGG,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,2CAA+CF,CAA/C;AACD;;AACD,SAASG,OAAT,CAAiBC,MAAjB,EAAyB;AACvBN,EAAAA,IAAI,GAAGM,MAAP;AACAH,EAAAA,OAAO,CAACC,GAAR,8BAAkCJ,IAAlC;AACD;;SACcH;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEI,YAAAA,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,EAAlC,CAAR;AACAJ,YAAAA,OAAO,CAAC,IAAD,CAAP;AAFF;AAAA,mBAGyBK,WAAW,EAHpC;;AAAA;AAGQC,YAAAA,QAHR;AAIMC,YAAAA,aAJN,GAIsB,CAJtB;;AAAA;AAAA,kBAKSA,aAAa,IAAIb,KAL1B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMUc,KAAK,CAACN,IAAI,CAACE,MAAL,KAAgB,IAAhB,GAAuBT,IAAxB,CANf;;AAAA;AAOIW,YAAAA,QAAQ,CAACG,SAAT,GAAqBF,aAAa,EAAlC;AAPJ;AAAA;;AAAA;AAAA;AAAA,mBASqB,0CAAO,YAAP,EATrB;;AAAA;AASQG,YAAAA,IATR;AAUEC,YAAAA,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCC,SAAvC,GAAmDH,IAAnD;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAaA,SAASF,KAAT,CAAeM,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,GAAG;AAAA,WAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAAd;AAAA,GAAf,CAAP;AACD;;SAEcT;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,QADN,GACiB,IADjB;;AAAA;AAAA,gBAEUA,QAFV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGqBY,YAAY,EAHjC;;AAAA;AAGIZ,YAAAA,QAHJ;AAAA;AAAA;;AAAA;AAAA,8CAKSA,QALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAOA,SAASY,YAAT,GAAwB;AACtB,SAAO,IAAIH,OAAJ,CAAY,UAAAC,GAAG,EAAI;AACxBC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAIX,QAAQ,GAAGK,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAf;AACAI,MAAAA,GAAG,CAACV,QAAD,CAAH;AACD,KAHS,CAAV;AAID,GALM,CAAP;AAMD","file":"win10.4c52f76e.map","sourceRoot":"..","sourcesContent":["import update from './update.pug';\r\nimport './update.scss';\r\nimport './blue.scss';\r\n\r\nexport const render = () => {\r\n  startProgress();\r\n  return update;\r\n};\r\nlet crash;\r\nlet next;\r\nfunction setCrash(v) {\r\n  crash = v;\r\n  console.log(`Blue screen when progress reach ${v}%`);\r\n}\r\nfunction setNext(second) {\r\n  next = second;\r\n  console.log(`Add progress every ${next} milliseconds`);\r\n}\r\nasync function startProgress() {\r\n  setCrash(Math.floor(Math.random() * 40) + 61);\r\n  setNext(1000);\r\n  const progress = await getProgress();\r\n  let progressValue = 1;\r\n  while (progressValue <= crash) {\r\n    await sleep(Math.random() * 1000 + next);\r\n    progress.innerText = progressValue++;\r\n  }\r\n  const blue = await import('./blue.pug');\r\n  document.querySelector('.app-wrapper').innerHTML = blue;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(res => setTimeout(res, ms));\r\n}\r\n\r\nasync function getProgress() {\r\n  let progress = null;\r\n  while (!progress) {\r\n    progress = await findProgress();\r\n  }\r\n  return progress;\r\n}\r\nfunction findProgress() {\r\n  return new Promise(res => {\r\n    setTimeout(() => {\r\n      let progress = document.querySelector('#progress');\r\n      res(progress);\r\n    });\r\n  });\r\n}\r\n"]}