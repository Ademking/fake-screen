{"version":3,"sources":["sw.js"],"names":["version","cacheName","self","addEventListener","e","waitUntil","caches","open","then","cache","addAll","catch","console","log","event","request","url","startsWith","respondWith","match","response","fetchPromise","fetch","networkResponse","put","clone"],"mappings":";AAAA,IAAMA,EAAU,QACVC,EAA4BD,gBAAAA,OAAAA,GAClCE,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BA,EAAEC,UACAC,OACGC,KAAKN,GACLO,KAAK,SAAAC,GACGA,OAAAA,EAAMC,OAAO,CAElB,IAAA,cACA,6DAGHC,MAAMC,QAAQC,QAIrBX,KAAKC,iBAAiB,QAAS,SAASW,GACjCA,EAAMC,QAAQC,IAAIC,WAAW,qBAChCH,EAAMI,YACJZ,OAAOC,KAAKN,GAAWO,KAAK,SAASC,GAC5BA,OAAAA,EAAMU,MAAML,EAAMC,SAASP,KAAK,SAASY,GACxCC,IAAAA,EAAeC,MAAMR,EAAMC,SAC9BP,KAAK,SAASe,GAENA,OADPd,EAAMe,IAAIV,EAAMC,QAASQ,EAAgBE,SAClCF,IAERZ,MAAMC,QAAQC,KACVO,OAAAA,GAAYC","file":"sw.map","sourceRoot":"..","sourcesContent":["const version = '0.0.1';\nconst cacheName = `fake-screens-${version}`;\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches\n      .open(cacheName)\n      .then(cache => {\n        return cache.addAll([\n          `/`,\n          '/index.html',\n          'https://fonts.googleapis.com/css?family=Ubuntu:300,500',\n        ]);\n      })\n      .catch(console.log),\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  if (!event.request.url.startsWith('chrome-extension')) {\n    event.respondWith(\n      caches.open(cacheName).then(function(cache) {\n        return cache.match(event.request).then(function(response) {\n          const fetchPromise = fetch(event.request)\n            .then(function(networkResponse) {\n              cache.put(event.request, networkResponse.clone());\n              return networkResponse;\n            })\n            .catch(console.log);\n          return response || fetchPromise;\n        });\n      }),\n    );\n  }\n});\n\n// self.addEventListener('fetch', function(event) {\n//   if (!event.request.url.startsWith('chrome-extension')) {\n//     event.respondWith(cacheResources(event.request));\n//   }\n// });\n\n// async function cacheResources(req) {\n//   const cache = await caches.open(cacheName);\n//   const cacheResponse = await cache.match(req);\n//   const fetchPromise = fetch(req).then(networkResponse => {\n//     cache.put(req, networkResponse.clone());\n//     return networkResponse;\n//   });\n//   return cacheResponse || fetchPromise;\n// }\n"]}